dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
import uk.ac.diamond.ss.domain.Allocation;
import uk.ac.diamond.ss.domain.Person;
import uk.ac.diamond.ss.domain.readers.WeightsReader;
import org.optaplanner.core.api.score.constraint.primint.IntConstraintMatch;

global HardSoftLongScoreHolder scoreHolder;

//comment on the variables

rule "groupSizeSoft"
    when
    	Allocation($aid : ID, getShift() != null, $ashiftID : getShift().getID())
    	$total : Number() from accumulate(
    		$a : Allocation(ID> $aid, getShift().getID() == $ashiftID), 
    		count($a)
    	)
    then
     int groupSoft = WeightsReader.GROUP_SIZE_SOFT;
    scoreHolder.addSoftConstraintMatch(kcontext,-groupSoft*($total.intValue()*$total.intValue()));
end

rule "groupSizeHard"
    when
    	Allocation($aid : ID, getShift() != null, $ashiftID : getShift().getID(), $studentsNumber : getShift().getStudentsPerShift())
    	$total : Number(intValue > $studentsNumber) from accumulate(
    		$a : Allocation(ID>= $aid, getShift().getID() == $ashiftID), 
    		count($a)
    	)
    then
    int groupHard = WeightsReader.GROUP_SIZE_HARD;
    scoreHolder.addHardConstraintMatch(kcontext,-groupHard*$total.intValue());
end

rule "noOverlappingAllocationsHard"
   when
  	 Allocation($aid : ID, getShift() != null, $ashift : getShift(), getPerson() != null, $aPersonID : getPerson().getID())
     Allocation(ID> $aid, getShift().checkOverlap($ashift), getPerson().getID() == $aPersonID )
    then
    int noOverlapping = WeightsReader.NO_OVERLAPPING;
    scoreHolder.addHardConstraintMatch(kcontext, - noOverlapping);
end

rule "noSimilarSesssionsHard"
    when
    	Allocation($aid : ID, getShift() != null,  $ashift : getShift(),getPerson() != null, $aPersonID : getPerson().getID())
    	Allocation( ID> $aid,getShift().getSimilar($ashift), getPerson().getID() == $aPersonID )
    then
    int noSimilar = WeightsReader.NO_SIMILOAR;
    scoreHolder.addHardConstraintMatch(kcontext, -noSimilar);
end

rule "correlationSoft"
    when
    	$a1:Allocation($aid : ID, getShift() != null,  $ashift : getShift(),getPerson() != null, $aPersonID : getPerson().getID())
    	$a2:Allocation(ID> $aid, getShift().getCorrelated($ashift)!=0, getPerson().getID() == $aPersonID )
    then
    int correlation = WeightsReader.CORRELATION;
    scoreHolder.addSoftConstraintMatch(kcontext,-correlation*$a2.getShift().getCorrelated($a1.getShift()));
end

rule "longExperimentsPairsHard"
 when
 	Allocation($aid : ID,getShift() != null, $apair: getShift().getPair(), getPerson() != null, $aPersonID : getPerson().getID())
 	Allocation(getShift() != null, getPerson() != null, getShift()==$apair, getPerson().getID() == $aPersonID)
 then
 	 int longExperimants = WeightsReader.LONG_EXPERIMANTS;
   scoreHolder.addHardConstraintMatch(kcontext,longExperimants);
end

rule "preferencesSoft"
when
   Person($aPersonID : getID(), $totalPreference : getSumPreference())
   	$totalPreferences : Number() from accumulate(
    		Allocation(getShift() != null, getPerson() != null, getPerson().getID() == $aPersonID, $preference: getPerson().checkPreference(getShift())),
    		sum($preference)
    	)
then
 int pref = WeightsReader.PREFERENCES;
 scoreHolder.addSoftConstraintMatch(kcontext, pref*(-$totalPreference  + $totalPreferences.intValue()));
end

